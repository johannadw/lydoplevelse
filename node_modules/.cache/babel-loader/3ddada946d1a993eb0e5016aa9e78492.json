{"ast":null,"code":"export function distance(x1, y1, x2, y2) {\n  return Math.sqrt(Math.pow(Math.abs(x2 - x1), 2) + Math.pow(Math.abs(y2 - y1), 2));\n}\nexport function inAngleRanges(x1, y1, x2, y2, angleRanges) {\n  if (!angleRanges) {\n    return false;\n  }\n\n  var angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI + 180;\n\n  for (var i = 0; i < angleRanges.length; ++i) {\n    var ar = angleRanges[i];\n\n    if (ar && (ar.start == null || angle >= ar.start) && (ar.end == null || angle <= ar.end)) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"mappings":"AAEA,OAAO,SAASA,QAAT,CACNC,EADM,EAENC,EAFM,EAGNC,EAHM,EAINC,EAJM,EAKG;AACT,SAAOC,IAAI,CAACC,IAALD,CACNA,IAAI,CAACE,GAALF,CAASA,IAAI,CAACG,GAALH,CAASF,EAAE,GAAGF,EAAdI,CAATA,EAA4B,CAA5BA,IAAiCA,IAAI,CAACE,GAALF,CAASA,IAAI,CAACG,GAALH,CAASD,EAAE,GAAGF,EAAdG,CAATA,EAA4B,CAA5BA,CAD3BA,CAAP;AAGA;AAED,OAAO,SAASI,aAAT,CACNR,EADM,EAENC,EAFM,EAGNC,EAHM,EAINC,EAJM,EAKNM,WALM,EAMI;AACV,MAAI,CAACA,WAAL,EAAkB;AACjB,WAAO,KAAP;AACA;;AAED,MAAMC,KAAK,GAAIN,IAAI,CAACO,KAAN,CAAYR,EAAE,GAAGF,EAAjB,EAAqBC,EAAE,GAAGF,EAA1B,IAAgC,GAAhC,GAAuCI,IAAI,CAACQ,EAA3CR,GAAgD,GAA/D;;AAEA,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,WAAW,CAACK,MAAhC,EAAwC,EAAED,CAA1C,EAA6C;AAC5C,QAAME,EAAE,GAAGN,WAAW,CAACI,CAAD,CAAtB;;AACA,QACCE,EAAE,KACDA,EAAE,CAACC,KAAHD,IAAY,IAAZA,IAAoBL,KAAK,IAAIK,EAAE,CAACC,KAD/B,CAAFD,KAECA,EAAE,CAACE,GAAHF,IAAU,IAAVA,IAAkBL,KAAK,IAAIK,EAAE,CAACE,GAF/BF,CADD,EAIE;AACD,aAAO,IAAP;AACA;AACD;;AAED,SAAO,KAAP;AACA","names":["distance","x1","y1","x2","y2","Math","sqrt","pow","abs","inAngleRanges","angleRanges","angle","atan2","PI","i","length","ar","start","end"],"sources":["/Users/johannadeweerdt/Documents/school/erasmus/code/bm-lyd-deploy/frontend/node_modules/react-dnd-touch-backend/src/utils/math.ts"],"sourcesContent":["import type { AngleRange } from '../interfaces.js'\n\nexport function distance(\n\tx1: number,\n\ty1: number,\n\tx2: number,\n\ty2: number,\n): number {\n\treturn Math.sqrt(\n\t\tMath.pow(Math.abs(x2 - x1), 2) + Math.pow(Math.abs(y2 - y1), 2),\n\t)\n}\n\nexport function inAngleRanges(\n\tx1: number,\n\ty1: number,\n\tx2: number,\n\ty2: number,\n\tangleRanges: AngleRange[] | undefined,\n): boolean {\n\tif (!angleRanges) {\n\t\treturn false\n\t}\n\n\tconst angle = (Math.atan2(y2 - y1, x2 - x1) * 180) / Math.PI + 180\n\n\tfor (let i = 0; i < angleRanges.length; ++i) {\n\t\tconst ar = angleRanges[i]\n\t\tif (\n\t\t\tar &&\n\t\t\t(ar.start == null || angle >= ar.start) &&\n\t\t\t(ar.end == null || angle <= ar.end)\n\t\t) {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n"]},"metadata":{},"sourceType":"module"}