{"ast":null,"code":"import _classCallCheck from \"/Users/johannadeweerdt/Documents/school/erasmus/code/lydoplevelse-test/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/johannadeweerdt/Documents/school/erasmus/code/lydoplevelse-test/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _slicedToArray from \"/Users/johannadeweerdt/Documents/school/erasmus/code/lydoplevelse-test/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { asap } from '@react-dnd/asap';\nimport { invariant } from '@react-dnd/invariant';\nimport { addSource as _addSource, addTarget as _addTarget, removeSource as _removeSource, removeTarget as _removeTarget } from '../actions/registry.js';\nimport { validateSourceContract, validateTargetContract, validateType } from '../contracts.js';\nimport { HandlerRole } from '../interfaces.js';\nimport { getNextUniqueId } from '../utils/getNextUniqueId.js';\n\nfunction getNextHandlerId(role) {\n  var id = getNextUniqueId().toString();\n\n  switch (role) {\n    case HandlerRole.SOURCE:\n      return \"S\".concat(id);\n\n    case HandlerRole.TARGET:\n      return \"T\".concat(id);\n\n    default:\n      throw new Error(\"Unknown Handler Role: \".concat(role));\n  }\n}\n\nfunction parseRoleFromHandlerId(handlerId) {\n  switch (handlerId[0]) {\n    case 'S':\n      return HandlerRole.SOURCE;\n\n    case 'T':\n      return HandlerRole.TARGET;\n\n    default:\n      throw new Error(\"Cannot parse handler ID: \".concat(handlerId));\n  }\n}\n\nfunction mapContainsValue(map, searchValue) {\n  var entries = map.entries();\n  var isDone = false;\n\n  do {\n    var _entries$next = entries.next(),\n        done = _entries$next.done,\n        _entries$next$value = _slicedToArray(_entries$next.value, 2),\n        value = _entries$next$value[1];\n\n    if (value === searchValue) {\n      return true;\n    }\n\n    isDone = !!done;\n  } while (!isDone);\n\n  return false;\n}\n\nexport var HandlerRegistryImpl = /*#__PURE__*/function () {\n  function HandlerRegistryImpl(store) {\n    _classCallCheck(this, HandlerRegistryImpl);\n\n    this.types = new Map();\n    this.dragSources = new Map();\n    this.dropTargets = new Map();\n    this.pinnedSourceId = null;\n    this.pinnedSource = null;\n    this.store = store;\n  }\n\n  _createClass(HandlerRegistryImpl, [{\n    key: \"addSource\",\n    value: function addSource(type, source) {\n      validateType(type);\n      validateSourceContract(source);\n      var sourceId = this.addHandler(HandlerRole.SOURCE, type, source);\n      this.store.dispatch(_addSource(sourceId));\n      return sourceId;\n    }\n  }, {\n    key: \"addTarget\",\n    value: function addTarget(type, target) {\n      validateType(type, true);\n      validateTargetContract(target);\n      var targetId = this.addHandler(HandlerRole.TARGET, type, target);\n      this.store.dispatch(_addTarget(targetId));\n      return targetId;\n    }\n  }, {\n    key: \"containsHandler\",\n    value: function containsHandler(handler) {\n      return mapContainsValue(this.dragSources, handler) || mapContainsValue(this.dropTargets, handler);\n    }\n  }, {\n    key: \"getSource\",\n    value: function getSource(sourceId) {\n      var includePinned = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');\n      var isPinned = includePinned && sourceId === this.pinnedSourceId;\n      var source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId);\n      return source;\n    }\n  }, {\n    key: \"getTarget\",\n    value: function getTarget(targetId) {\n      invariant(this.isTargetId(targetId), 'Expected a valid target ID.');\n      return this.dropTargets.get(targetId);\n    }\n  }, {\n    key: \"getSourceType\",\n    value: function getSourceType(sourceId) {\n      invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');\n      return this.types.get(sourceId);\n    }\n  }, {\n    key: \"getTargetType\",\n    value: function getTargetType(targetId) {\n      invariant(this.isTargetId(targetId), 'Expected a valid target ID.');\n      return this.types.get(targetId);\n    }\n  }, {\n    key: \"isSourceId\",\n    value: function isSourceId(handlerId) {\n      var role = parseRoleFromHandlerId(handlerId);\n      return role === HandlerRole.SOURCE;\n    }\n  }, {\n    key: \"isTargetId\",\n    value: function isTargetId(handlerId) {\n      var role = parseRoleFromHandlerId(handlerId);\n      return role === HandlerRole.TARGET;\n    }\n  }, {\n    key: \"removeSource\",\n    value: function removeSource(sourceId) {\n      var _this = this;\n\n      invariant(this.getSource(sourceId), 'Expected an existing source.');\n      this.store.dispatch(_removeSource(sourceId));\n      asap(function () {\n        _this.dragSources.delete(sourceId);\n\n        _this.types.delete(sourceId);\n      });\n    }\n  }, {\n    key: \"removeTarget\",\n    value: function removeTarget(targetId) {\n      invariant(this.getTarget(targetId), 'Expected an existing target.');\n      this.store.dispatch(_removeTarget(targetId));\n      this.dropTargets.delete(targetId);\n      this.types.delete(targetId);\n    }\n  }, {\n    key: \"pinSource\",\n    value: function pinSource(sourceId) {\n      var source = this.getSource(sourceId);\n      invariant(source, 'Expected an existing source.');\n      this.pinnedSourceId = sourceId;\n      this.pinnedSource = source;\n    }\n  }, {\n    key: \"unpinSource\",\n    value: function unpinSource() {\n      invariant(this.pinnedSource, 'No source is pinned at the time.');\n      this.pinnedSourceId = null;\n      this.pinnedSource = null;\n    }\n  }, {\n    key: \"addHandler\",\n    value: function addHandler(role, type, handler) {\n      var id = getNextHandlerId(role);\n      this.types.set(id, type);\n\n      if (role === HandlerRole.SOURCE) {\n        this.dragSources.set(id, handler);\n      } else if (role === HandlerRole.TARGET) {\n        this.dropTargets.set(id, handler);\n      }\n\n      return id;\n    }\n  }]);\n\n  return HandlerRegistryImpl;\n}();","map":{"version":3,"mappings":"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","names":["asap","invariant","addSource","addTarget","removeSource","removeTarget","validateSourceContract","validateTargetContract","validateType","HandlerRole","getNextUniqueId","getNextHandlerId","role","id","toString","SOURCE","TARGET","Error","parseRoleFromHandlerId","handlerId","mapContainsValue","map","searchValue","entries","isDone","next","done","value","HandlerRegistryImpl","store","types","Map","dragSources","dropTargets","pinnedSourceId","pinnedSource","type","source","sourceId","addHandler","dispatch","target","targetId","handler","containsHandler","getSource","includePinned","isSourceId","isPinned","get","getTarget","isTargetId","getSourceType","getTargetType","delete","pinSource","unpinSource","set"],"sources":["/Users/johannadeweerdt/Documents/school/erasmus/code/lydoplevelse-test/node_modules/dnd-core/src/classes/HandlerRegistryImpl.ts"],"sourcesContent":["import { asap } from '@react-dnd/asap'\nimport { invariant } from '@react-dnd/invariant'\nimport type { Store } from 'redux'\n\nimport {\n\taddSource,\n\taddTarget,\n\tremoveSource,\n\tremoveTarget,\n} from '../actions/registry.js'\nimport {\n\tvalidateSourceContract,\n\tvalidateTargetContract,\n\tvalidateType,\n} from '../contracts.js'\nimport type {\n\tDragSource,\n\tDropTarget,\n\tHandlerRegistry,\n\tIdentifier,\n\tSourceType,\n\tTargetType,\n} from '../interfaces.js'\nimport { HandlerRole } from '../interfaces.js'\nimport type { State } from '../reducers/index.js'\nimport { getNextUniqueId } from '../utils/getNextUniqueId.js'\n\nfunction getNextHandlerId(role: HandlerRole): string {\n\tconst id = getNextUniqueId().toString()\n\tswitch (role) {\n\t\tcase HandlerRole.SOURCE:\n\t\t\treturn `S${id}`\n\t\tcase HandlerRole.TARGET:\n\t\t\treturn `T${id}`\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown Handler Role: ${role}`)\n\t}\n}\n\nfunction parseRoleFromHandlerId(handlerId: string) {\n\tswitch (handlerId[0]) {\n\t\tcase 'S':\n\t\t\treturn HandlerRole.SOURCE\n\t\tcase 'T':\n\t\t\treturn HandlerRole.TARGET\n\t\tdefault:\n\t\t\tthrow new Error(`Cannot parse handler ID: ${handlerId}`)\n\t}\n}\n\nfunction mapContainsValue<T>(map: Map<string, T>, searchValue: T) {\n\tconst entries = map.entries()\n\tlet isDone = false\n\tdo {\n\t\tconst {\n\t\t\tdone,\n\t\t\tvalue: [, value],\n\t\t} = entries.next()\n\t\tif (value === searchValue) {\n\t\t\treturn true\n\t\t}\n\t\tisDone = !!done\n\t} while (!isDone)\n\treturn false\n}\n\nexport class HandlerRegistryImpl implements HandlerRegistry {\n\tprivate types: Map<string, SourceType | TargetType> = new Map()\n\tprivate dragSources: Map<string, DragSource> = new Map()\n\tprivate dropTargets: Map<string, DropTarget> = new Map()\n\tprivate pinnedSourceId: string | null = null\n\tprivate pinnedSource: any = null\n\tprivate store: Store<State>\n\n\tpublic constructor(store: Store<State>) {\n\t\tthis.store = store\n\t}\n\n\tpublic addSource(type: SourceType, source: DragSource): string {\n\t\tvalidateType(type)\n\t\tvalidateSourceContract(source)\n\n\t\tconst sourceId = this.addHandler(HandlerRole.SOURCE, type, source)\n\t\tthis.store.dispatch(addSource(sourceId))\n\t\treturn sourceId\n\t}\n\n\tpublic addTarget(type: TargetType, target: DropTarget): string {\n\t\tvalidateType(type, true)\n\t\tvalidateTargetContract(target)\n\n\t\tconst targetId = this.addHandler(HandlerRole.TARGET, type, target)\n\t\tthis.store.dispatch(addTarget(targetId))\n\t\treturn targetId\n\t}\n\n\tpublic containsHandler(handler: DragSource | DropTarget): boolean {\n\t\treturn (\n\t\t\tmapContainsValue(this.dragSources, handler) ||\n\t\t\tmapContainsValue(this.dropTargets, handler)\n\t\t)\n\t}\n\n\tpublic getSource(sourceId: string, includePinned = false): DragSource {\n\t\tinvariant(this.isSourceId(sourceId), 'Expected a valid source ID.')\n\t\tconst isPinned = includePinned && sourceId === this.pinnedSourceId\n\t\tconst source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId)\n\t\treturn source\n\t}\n\n\tpublic getTarget(targetId: string): DropTarget {\n\t\tinvariant(this.isTargetId(targetId), 'Expected a valid target ID.')\n\t\treturn this.dropTargets.get(targetId) as DropTarget\n\t}\n\n\tpublic getSourceType(sourceId: string): Identifier {\n\t\tinvariant(this.isSourceId(sourceId), 'Expected a valid source ID.')\n\t\treturn this.types.get(sourceId) as Identifier\n\t}\n\n\tpublic getTargetType(targetId: string): Identifier | Identifier[] {\n\t\tinvariant(this.isTargetId(targetId), 'Expected a valid target ID.')\n\t\treturn this.types.get(targetId) as Identifier | Identifier[]\n\t}\n\n\tpublic isSourceId(handlerId: string): boolean {\n\t\tconst role = parseRoleFromHandlerId(handlerId)\n\t\treturn role === HandlerRole.SOURCE\n\t}\n\n\tpublic isTargetId(handlerId: string): boolean {\n\t\tconst role = parseRoleFromHandlerId(handlerId)\n\t\treturn role === HandlerRole.TARGET\n\t}\n\n\tpublic removeSource(sourceId: string): void {\n\t\tinvariant(this.getSource(sourceId), 'Expected an existing source.')\n\t\tthis.store.dispatch(removeSource(sourceId))\n\t\tasap(() => {\n\t\t\tthis.dragSources.delete(sourceId)\n\t\t\tthis.types.delete(sourceId)\n\t\t})\n\t}\n\n\tpublic removeTarget(targetId: string): void {\n\t\tinvariant(this.getTarget(targetId), 'Expected an existing target.')\n\t\tthis.store.dispatch(removeTarget(targetId))\n\t\tthis.dropTargets.delete(targetId)\n\t\tthis.types.delete(targetId)\n\t}\n\n\tpublic pinSource(sourceId: string): void {\n\t\tconst source = this.getSource(sourceId)\n\t\tinvariant(source, 'Expected an existing source.')\n\n\t\tthis.pinnedSourceId = sourceId\n\t\tthis.pinnedSource = source\n\t}\n\n\tpublic unpinSource(): void {\n\t\tinvariant(this.pinnedSource, 'No source is pinned at the time.')\n\n\t\tthis.pinnedSourceId = null\n\t\tthis.pinnedSource = null\n\t}\n\n\tprivate addHandler(\n\t\trole: HandlerRole,\n\t\ttype: SourceType | TargetType,\n\t\thandler: DragSource | DropTarget,\n\t): string {\n\t\tconst id = getNextHandlerId(role)\n\t\tthis.types.set(id, type)\n\t\tif (role === HandlerRole.SOURCE) {\n\t\t\tthis.dragSources.set(id, handler as DragSource)\n\t\t} else if (role === HandlerRole.TARGET) {\n\t\t\tthis.dropTargets.set(id, handler as DropTarget)\n\t\t}\n\t\treturn id\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}