{"ast":null,"code":"import { NativeDragSource } from './NativeDragSource.js';\nimport { nativeTypesConfig } from './nativeTypesConfig.js';\nexport function createNativeDragSource(type, dataTransfer) {\n  var config = nativeTypesConfig[type];\n\n  if (!config) {\n    throw new Error(\"native type \".concat(type, \" has no configuration\"));\n  }\n\n  var result = new NativeDragSource(config);\n  result.loadDataTransfer(dataTransfer);\n  return result;\n}\nexport function matchNativeItemType(dataTransfer) {\n  if (!dataTransfer) {\n    return null;\n  }\n\n  var dataTransferTypes = Array.prototype.slice.call(dataTransfer.types || []);\n  return Object.keys(nativeTypesConfig).filter(function (nativeItemType) {\n    var typeConfig = nativeTypesConfig[nativeItemType];\n\n    if (!(typeConfig === null || typeConfig === void 0 ? void 0 : typeConfig.matchesTypes)) {\n      return false;\n    }\n\n    return typeConfig.matchesTypes.some(function (t) {\n      return dataTransferTypes.indexOf(t) > -1;\n    });\n  })[0] || null;\n}","map":{"version":3,"mappings":"AAAA,SAASA,gBAAT,QAAiC,uBAAjC;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AAEA,OAAO,SAASC,sBAAT,CACNC,IADM,EAENC,YAFM,EAGa;AACnB,MAAMC,MAAM,GAAGJ,iBAAiB,CAACE,IAAD,CAAhC;;AACA,MAAI,CAACE,MAAL,EAAa;AACZ,UAAM,IAAIC,KAAJ,uBAAyBH,IAAzB,2BAAN;AACA;;AACD,MAAMI,MAAM,GAAG,IAAIP,gBAAJ,CAAqBK,MAArB,CAAf;AACAE,QAAM,CAACC,gBAAPD,CAAwBH,YAAxBG;AACA,SAAOA,MAAP;AACA;AAED,OAAO,SAASE,mBAAT,CACNL,YADM,EAEU;AAChB,MAAI,CAACA,YAAL,EAAmB;AAClB,WAAO,IAAP;AACA;;AAED,MAAMM,iBAAiB,GAAGC,KAAK,CAACC,SAAND,CAAgBE,KAAhBF,CAAsBG,IAAtBH,CAA2BP,YAAY,CAACW,KAAbX,IAAsB,EAAjDO,CAA1B;AACA,SACCK,MAAM,CAACC,IAAPD,CAAYf,iBAAZe,EAA+BE,MAA/BF,CAAsC,UAACG,cAAD,EAAoB;AACzD,QAAMC,UAAU,GAAGnB,iBAAiB,CAACkB,cAAD,CAApC;;AACA,QAAI,EAACC,UAAU,SAAVA,cAAU,WAAVA,sBAAU,CAAEC,YAAb,CAAJ,EAA+B;AAC9B,aAAO,KAAP;AACA;;AACD,WAAOD,UAAU,CAACC,YAAXD,CAAwBE,IAAxBF,CACN,UAACG,CAAD;AAAA,aAAOb,iBAAiB,CAACc,OAAlBd,CAA0Ba,CAA1Bb,IAA+B,CAAC,CAAvC;AAAA,KADMU,CAAP;AAGA,GARDJ,EAQG,CARHA,KAQS,IATV;AAWA","names":["NativeDragSource","nativeTypesConfig","createNativeDragSource","type","dataTransfer","config","Error","result","loadDataTransfer","matchNativeItemType","dataTransferTypes","Array","prototype","slice","call","types","Object","keys","filter","nativeItemType","typeConfig","matchesTypes","some","t","indexOf"],"sources":["/Users/johannadeweerdt/Documents/school/erasmus/code/lydoplevelse-test/node_modules/react-dnd-html5-backend/src/NativeDragSources/index.ts"],"sourcesContent":["import { NativeDragSource } from './NativeDragSource.js'\nimport { nativeTypesConfig } from './nativeTypesConfig.js'\n\nexport function createNativeDragSource(\n\ttype: string,\n\tdataTransfer?: DataTransfer,\n): NativeDragSource {\n\tconst config = nativeTypesConfig[type]\n\tif (!config) {\n\t\tthrow new Error(`native type ${type} has no configuration`)\n\t}\n\tconst result = new NativeDragSource(config)\n\tresult.loadDataTransfer(dataTransfer)\n\treturn result\n}\n\nexport function matchNativeItemType(\n\tdataTransfer: DataTransfer | null,\n): string | null {\n\tif (!dataTransfer) {\n\t\treturn null\n\t}\n\n\tconst dataTransferTypes = Array.prototype.slice.call(dataTransfer.types || [])\n\treturn (\n\t\tObject.keys(nativeTypesConfig).filter((nativeItemType) => {\n\t\t\tconst typeConfig = nativeTypesConfig[nativeItemType]\n\t\t\tif (!typeConfig?.matchesTypes) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\treturn typeConfig.matchesTypes.some(\n\t\t\t\t(t) => dataTransferTypes.indexOf(t) > -1,\n\t\t\t)\n\t\t})[0] || null\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}