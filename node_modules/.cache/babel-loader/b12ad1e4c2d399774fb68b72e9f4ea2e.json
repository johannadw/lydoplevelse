{"ast":null,"code":"import _classCallCheck from \"/Users/johannadeweerdt/Documents/school/erasmus/code/lydoplevelse-test/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/johannadeweerdt/Documents/school/erasmus/code/lydoplevelse-test/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { shallowEqual } from '@react-dnd/shallowequal';\nimport { isRef } from './isRef.js';\nimport { wrapConnectorHooks } from './wrapConnectorHooks.js';\nexport var SourceConnector = /*#__PURE__*/function () {\n  function SourceConnector(backend) {\n    var _this = this;\n\n    _classCallCheck(this, SourceConnector);\n\n    this.hooks = wrapConnectorHooks({\n      dragSource: function dragSource(node, options) {\n        _this.clearDragSource();\n\n        _this.dragSourceOptions = options || null;\n\n        if (isRef(node)) {\n          _this.dragSourceRef = node;\n        } else {\n          _this.dragSourceNode = node;\n        }\n\n        _this.reconnectDragSource();\n      },\n      dragPreview: function dragPreview(node, options) {\n        _this.clearDragPreview();\n\n        _this.dragPreviewOptions = options || null;\n\n        if (isRef(node)) {\n          _this.dragPreviewRef = node;\n        } else {\n          _this.dragPreviewNode = node;\n        }\n\n        _this.reconnectDragPreview();\n      }\n    });\n    this.handlerId = null; // The drop target may either be attached via ref or connect function\n\n    this.dragSourceRef = null;\n    this.dragSourceOptionsInternal = null; // The drag preview may either be attached via ref or connect function\n\n    this.dragPreviewRef = null;\n    this.dragPreviewOptionsInternal = null;\n    this.lastConnectedHandlerId = null;\n    this.lastConnectedDragSource = null;\n    this.lastConnectedDragSourceOptions = null;\n    this.lastConnectedDragPreview = null;\n    this.lastConnectedDragPreviewOptions = null;\n    this.backend = backend;\n  }\n\n  _createClass(SourceConnector, [{\n    key: \"receiveHandlerId\",\n    value: function receiveHandlerId(newHandlerId) {\n      if (this.handlerId === newHandlerId) {\n        return;\n      }\n\n      this.handlerId = newHandlerId;\n      this.reconnect();\n    }\n  }, {\n    key: \"connectTarget\",\n    get: function get() {\n      return this.dragSource;\n    }\n  }, {\n    key: \"dragSourceOptions\",\n    get: function get() {\n      return this.dragSourceOptionsInternal;\n    },\n    set: function set(options) {\n      this.dragSourceOptionsInternal = options;\n    }\n  }, {\n    key: \"dragPreviewOptions\",\n    get: function get() {\n      return this.dragPreviewOptionsInternal;\n    },\n    set: function set(options) {\n      this.dragPreviewOptionsInternal = options;\n    }\n  }, {\n    key: \"reconnect\",\n    value: function reconnect() {\n      var didChange = this.reconnectDragSource();\n      this.reconnectDragPreview(didChange);\n    }\n  }, {\n    key: \"reconnectDragSource\",\n    value: function reconnectDragSource() {\n      var dragSource = this.dragSource; // if nothing has changed then don't resubscribe\n\n      var didChange = this.didHandlerIdChange() || this.didConnectedDragSourceChange() || this.didDragSourceOptionsChange();\n\n      if (didChange) {\n        this.disconnectDragSource();\n      }\n\n      if (!this.handlerId) {\n        return didChange;\n      }\n\n      if (!dragSource) {\n        this.lastConnectedDragSource = dragSource;\n        return didChange;\n      }\n\n      if (didChange) {\n        this.lastConnectedHandlerId = this.handlerId;\n        this.lastConnectedDragSource = dragSource;\n        this.lastConnectedDragSourceOptions = this.dragSourceOptions;\n        this.dragSourceUnsubscribe = this.backend.connectDragSource(this.handlerId, dragSource, this.dragSourceOptions);\n      }\n\n      return didChange;\n    }\n  }, {\n    key: \"reconnectDragPreview\",\n    value: function reconnectDragPreview() {\n      var forceDidChange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var dragPreview = this.dragPreview; // if nothing has changed then don't resubscribe\n\n      var didChange = forceDidChange || this.didHandlerIdChange() || this.didConnectedDragPreviewChange() || this.didDragPreviewOptionsChange();\n\n      if (didChange) {\n        this.disconnectDragPreview();\n      }\n\n      if (!this.handlerId) {\n        return;\n      }\n\n      if (!dragPreview) {\n        this.lastConnectedDragPreview = dragPreview;\n        return;\n      }\n\n      if (didChange) {\n        this.lastConnectedHandlerId = this.handlerId;\n        this.lastConnectedDragPreview = dragPreview;\n        this.lastConnectedDragPreviewOptions = this.dragPreviewOptions;\n        this.dragPreviewUnsubscribe = this.backend.connectDragPreview(this.handlerId, dragPreview, this.dragPreviewOptions);\n      }\n    }\n  }, {\n    key: \"didHandlerIdChange\",\n    value: function didHandlerIdChange() {\n      return this.lastConnectedHandlerId !== this.handlerId;\n    }\n  }, {\n    key: \"didConnectedDragSourceChange\",\n    value: function didConnectedDragSourceChange() {\n      return this.lastConnectedDragSource !== this.dragSource;\n    }\n  }, {\n    key: \"didConnectedDragPreviewChange\",\n    value: function didConnectedDragPreviewChange() {\n      return this.lastConnectedDragPreview !== this.dragPreview;\n    }\n  }, {\n    key: \"didDragSourceOptionsChange\",\n    value: function didDragSourceOptionsChange() {\n      return !shallowEqual(this.lastConnectedDragSourceOptions, this.dragSourceOptions);\n    }\n  }, {\n    key: \"didDragPreviewOptionsChange\",\n    value: function didDragPreviewOptionsChange() {\n      return !shallowEqual(this.lastConnectedDragPreviewOptions, this.dragPreviewOptions);\n    }\n  }, {\n    key: \"disconnectDragSource\",\n    value: function disconnectDragSource() {\n      if (this.dragSourceUnsubscribe) {\n        this.dragSourceUnsubscribe();\n        this.dragSourceUnsubscribe = undefined;\n      }\n    }\n  }, {\n    key: \"disconnectDragPreview\",\n    value: function disconnectDragPreview() {\n      if (this.dragPreviewUnsubscribe) {\n        this.dragPreviewUnsubscribe();\n        this.dragPreviewUnsubscribe = undefined;\n        this.dragPreviewNode = null;\n        this.dragPreviewRef = null;\n      }\n    }\n  }, {\n    key: \"dragSource\",\n    get: function get() {\n      return this.dragSourceNode || this.dragSourceRef && this.dragSourceRef.current;\n    }\n  }, {\n    key: \"dragPreview\",\n    get: function get() {\n      return this.dragPreviewNode || this.dragPreviewRef && this.dragPreviewRef.current;\n    }\n  }, {\n    key: \"clearDragSource\",\n    value: function clearDragSource() {\n      this.dragSourceNode = null;\n      this.dragSourceRef = null;\n    }\n  }, {\n    key: \"clearDragPreview\",\n    value: function clearDragPreview() {\n      this.dragPreviewNode = null;\n      this.dragPreviewRef = null;\n    }\n  }]);\n\n  return SourceConnector;\n}();","map":{"version":3,"mappings":"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","names":["shallowEqual","isRef","wrapConnectorHooks","SourceConnector","backend","hooks","dragSource","node","options","clearDragSource","dragSourceOptions","dragSourceRef","dragSourceNode","reconnectDragSource","dragPreview","clearDragPreview","dragPreviewOptions","dragPreviewRef","dragPreviewNode","reconnectDragPreview","handlerId","dragSourceOptionsInternal","dragPreviewOptionsInternal","lastConnectedHandlerId","lastConnectedDragSource","lastConnectedDragSourceOptions","lastConnectedDragPreview","lastConnectedDragPreviewOptions","newHandlerId","receiveHandlerId","reconnect","didChange","didHandlerIdChange","didConnectedDragSourceChange","didDragSourceOptionsChange","disconnectDragSource","dragSourceUnsubscribe","connectDragSource","forceDidChange","didConnectedDragPreviewChange","didDragPreviewOptionsChange","disconnectDragPreview","dragPreviewUnsubscribe","connectDragPreview","undefined","current"],"sources":["/Users/johannadeweerdt/Documents/school/erasmus/code/lydoplevelse-test/node_modules/react-dnd/src/internals/SourceConnector.ts"],"sourcesContent":["import { shallowEqual } from '@react-dnd/shallowequal'\nimport type { Backend, Identifier, Unsubscribe } from 'dnd-core'\nimport type { ReactElement, Ref, RefObject } from 'react'\n\nimport type { DragPreviewOptions, DragSourceOptions } from '../types/index.js'\nimport { isRef } from './isRef.js'\nimport { wrapConnectorHooks } from './wrapConnectorHooks.js'\n\nexport interface Connector {\n\thooks: any\n\tconnectTarget: any\n\treceiveHandlerId(handlerId: Identifier | null): void\n\treconnect(): void\n}\n\nexport class SourceConnector implements Connector {\n\tpublic hooks = wrapConnectorHooks({\n\t\tdragSource: (\n\t\t\tnode: Element | ReactElement | Ref<any>,\n\t\t\toptions?: DragSourceOptions,\n\t\t) => {\n\t\t\tthis.clearDragSource()\n\t\t\tthis.dragSourceOptions = options || null\n\t\t\tif (isRef(node)) {\n\t\t\t\tthis.dragSourceRef = node as RefObject<any>\n\t\t\t} else {\n\t\t\t\tthis.dragSourceNode = node\n\t\t\t}\n\t\t\tthis.reconnectDragSource()\n\t\t},\n\t\tdragPreview: (node: any, options?: DragPreviewOptions) => {\n\t\t\tthis.clearDragPreview()\n\t\t\tthis.dragPreviewOptions = options || null\n\t\t\tif (isRef(node)) {\n\t\t\t\tthis.dragPreviewRef = node\n\t\t\t} else {\n\t\t\t\tthis.dragPreviewNode = node\n\t\t\t}\n\t\t\tthis.reconnectDragPreview()\n\t\t},\n\t})\n\tprivate handlerId: Identifier | null = null\n\n\t// The drop target may either be attached via ref or connect function\n\tprivate dragSourceRef: RefObject<any> | null = null\n\tprivate dragSourceNode: any\n\tprivate dragSourceOptionsInternal: DragSourceOptions | null = null\n\tprivate dragSourceUnsubscribe: Unsubscribe | undefined\n\n\t// The drag preview may either be attached via ref or connect function\n\tprivate dragPreviewRef: RefObject<any> | null = null\n\tprivate dragPreviewNode: any\n\tprivate dragPreviewOptionsInternal: DragPreviewOptions | null = null\n\tprivate dragPreviewUnsubscribe: Unsubscribe | undefined\n\n\tprivate lastConnectedHandlerId: Identifier | null = null\n\tprivate lastConnectedDragSource: any = null\n\tprivate lastConnectedDragSourceOptions: any = null\n\tprivate lastConnectedDragPreview: any = null\n\tprivate lastConnectedDragPreviewOptions: any = null\n\n\tprivate readonly backend: Backend\n\n\tpublic constructor(backend: Backend) {\n\t\tthis.backend = backend\n\t}\n\n\tpublic receiveHandlerId(newHandlerId: Identifier | null): void {\n\t\tif (this.handlerId === newHandlerId) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.handlerId = newHandlerId\n\t\tthis.reconnect()\n\t}\n\n\tpublic get connectTarget(): any {\n\t\treturn this.dragSource\n\t}\n\n\tpublic get dragSourceOptions(): DragSourceOptions | null {\n\t\treturn this.dragSourceOptionsInternal\n\t}\n\tpublic set dragSourceOptions(options: DragSourceOptions | null) {\n\t\tthis.dragSourceOptionsInternal = options\n\t}\n\n\tpublic get dragPreviewOptions(): DragPreviewOptions | null {\n\t\treturn this.dragPreviewOptionsInternal\n\t}\n\n\tpublic set dragPreviewOptions(options: DragPreviewOptions | null) {\n\t\tthis.dragPreviewOptionsInternal = options\n\t}\n\n\tpublic reconnect(): void {\n\t\tconst didChange = this.reconnectDragSource()\n\t\tthis.reconnectDragPreview(didChange)\n\t}\n\n\tprivate reconnectDragSource(): boolean {\n\t\tconst dragSource = this.dragSource\n\t\t// if nothing has changed then don't resubscribe\n\t\tconst didChange =\n\t\t\tthis.didHandlerIdChange() ||\n\t\t\tthis.didConnectedDragSourceChange() ||\n\t\t\tthis.didDragSourceOptionsChange()\n\n\t\tif (didChange) {\n\t\t\tthis.disconnectDragSource()\n\t\t}\n\n\t\tif (!this.handlerId) {\n\t\t\treturn didChange\n\t\t}\n\t\tif (!dragSource) {\n\t\t\tthis.lastConnectedDragSource = dragSource\n\t\t\treturn didChange\n\t\t}\n\n\t\tif (didChange) {\n\t\t\tthis.lastConnectedHandlerId = this.handlerId\n\t\t\tthis.lastConnectedDragSource = dragSource\n\t\t\tthis.lastConnectedDragSourceOptions = this.dragSourceOptions\n\t\t\tthis.dragSourceUnsubscribe = this.backend.connectDragSource(\n\t\t\t\tthis.handlerId,\n\t\t\t\tdragSource,\n\t\t\t\tthis.dragSourceOptions,\n\t\t\t)\n\t\t}\n\t\treturn didChange\n\t}\n\n\tprivate reconnectDragPreview(forceDidChange = false): void {\n\t\tconst dragPreview = this.dragPreview\n\t\t// if nothing has changed then don't resubscribe\n\t\tconst didChange =\n\t\t\tforceDidChange ||\n\t\t\tthis.didHandlerIdChange() ||\n\t\t\tthis.didConnectedDragPreviewChange() ||\n\t\t\tthis.didDragPreviewOptionsChange()\n\n\t\tif (didChange) {\n\t\t\tthis.disconnectDragPreview()\n\t\t}\n\n\t\tif (!this.handlerId) {\n\t\t\treturn\n\t\t}\n\t\tif (!dragPreview) {\n\t\t\tthis.lastConnectedDragPreview = dragPreview\n\t\t\treturn\n\t\t}\n\n\t\tif (didChange) {\n\t\t\tthis.lastConnectedHandlerId = this.handlerId\n\t\t\tthis.lastConnectedDragPreview = dragPreview\n\t\t\tthis.lastConnectedDragPreviewOptions = this.dragPreviewOptions\n\t\t\tthis.dragPreviewUnsubscribe = this.backend.connectDragPreview(\n\t\t\t\tthis.handlerId,\n\t\t\t\tdragPreview,\n\t\t\t\tthis.dragPreviewOptions,\n\t\t\t)\n\t\t}\n\t}\n\n\tprivate didHandlerIdChange(): boolean {\n\t\treturn this.lastConnectedHandlerId !== this.handlerId\n\t}\n\n\tprivate didConnectedDragSourceChange(): boolean {\n\t\treturn this.lastConnectedDragSource !== this.dragSource\n\t}\n\n\tprivate didConnectedDragPreviewChange(): boolean {\n\t\treturn this.lastConnectedDragPreview !== this.dragPreview\n\t}\n\n\tprivate didDragSourceOptionsChange(): boolean {\n\t\treturn !shallowEqual(\n\t\t\tthis.lastConnectedDragSourceOptions,\n\t\t\tthis.dragSourceOptions,\n\t\t)\n\t}\n\n\tprivate didDragPreviewOptionsChange(): boolean {\n\t\treturn !shallowEqual(\n\t\t\tthis.lastConnectedDragPreviewOptions,\n\t\t\tthis.dragPreviewOptions,\n\t\t)\n\t}\n\n\tpublic disconnectDragSource() {\n\t\tif (this.dragSourceUnsubscribe) {\n\t\t\tthis.dragSourceUnsubscribe()\n\t\t\tthis.dragSourceUnsubscribe = undefined\n\t\t}\n\t}\n\n\tpublic disconnectDragPreview() {\n\t\tif (this.dragPreviewUnsubscribe) {\n\t\t\tthis.dragPreviewUnsubscribe()\n\t\t\tthis.dragPreviewUnsubscribe = undefined\n\t\t\tthis.dragPreviewNode = null\n\t\t\tthis.dragPreviewRef = null\n\t\t}\n\t}\n\n\tprivate get dragSource() {\n\t\treturn (\n\t\t\tthis.dragSourceNode || (this.dragSourceRef && this.dragSourceRef.current)\n\t\t)\n\t}\n\n\tprivate get dragPreview() {\n\t\treturn (\n\t\t\tthis.dragPreviewNode ||\n\t\t\t(this.dragPreviewRef && this.dragPreviewRef.current)\n\t\t)\n\t}\n\n\tprivate clearDragSource() {\n\t\tthis.dragSourceNode = null\n\t\tthis.dragSourceRef = null\n\t}\n\n\tprivate clearDragPreview() {\n\t\tthis.dragPreviewNode = null\n\t\tthis.dragPreviewRef = null\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}