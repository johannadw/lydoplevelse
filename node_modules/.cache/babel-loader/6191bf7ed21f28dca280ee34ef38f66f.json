{"ast":null,"code":"import { memo, useEffect } from 'react';\n/**\n * A utility for rendering a drag preview image\n */\n\nexport var DragPreviewImage = memo(function DragPreviewImage(_ref) {\n  var connect = _ref.connect,\n      src = _ref.src;\n  useEffect(function () {\n    if (typeof Image === 'undefined') return;\n    var connected = false;\n    var img = new Image();\n    img.src = src;\n\n    img.onload = function () {\n      connect(img);\n      connected = true;\n    };\n\n    return function () {\n      if (connected) {\n        connect(null);\n      }\n    };\n  });\n  return null;\n});","map":{"version":3,"mappings":"AACA,SAASA,IAAT,EAAeC,SAAf,QAAgC,OAAhC;AAQA;;;;AAGA,OAAO,IAAMC,gBAAgB,GAA8BF,IAAI,CAC9D,SAASE,gBAAT,OAA4C;AAAA,MAAhBC,OAAgB,QAAhBA,OAAgB;AAAA,MAAPC,GAAO,QAAPA,GAAO;AAC3CH,WAAS,CAAC,YAAM;AACf,QAAI,OAAOI,KAAP,KAAiB,WAArB,EAAkC;AAElC,QAAIC,SAAS,GAAG,KAAhB;AACA,QAAMC,GAAG,GAAG,IAAIF,KAAJ,EAAZ;AACAE,OAAG,CAACH,GAAJG,GAAUH,GAAVG;;AACAA,OAAG,CAACC,MAAJD,GAAa,YAAM;AAClBJ,aAAO,CAACI,GAAD,CAAPJ;AACAG,eAAS,GAAG,IAAZA;AACA,KAHDC;;AAIA,WAAO,YAAM;AACZ,UAAID,SAAJ,EAAe;AACdH,eAAO,CAAC,IAAD,CAAPA;AACA;AACD,KAJD;AAKA,GAfQ,CAATF;AAiBA,SAAO,IAAP;AACA,CApB6D,CAAxD","names":["memo","useEffect","DragPreviewImage","connect","src","Image","connected","img","onload"],"sources":["/Users/johannadeweerdt/Documents/school/erasmus/code/bm-lyd-deploy/frontend/node_modules/react-dnd/src/core/DragPreviewImage.ts"],"sourcesContent":["import type { FC } from 'react'\nimport { memo, useEffect } from 'react'\n\nimport type { ConnectDragPreview } from '../types/index.js'\n\nexport interface DragPreviewImageProps {\n\tconnect: ConnectDragPreview\n\tsrc: string\n}\n/**\n * A utility for rendering a drag preview image\n */\nexport const DragPreviewImage: FC<DragPreviewImageProps> = memo(\n\tfunction DragPreviewImage({ connect, src }) {\n\t\tuseEffect(() => {\n\t\t\tif (typeof Image === 'undefined') return\n\n\t\t\tlet connected = false\n\t\t\tconst img = new Image()\n\t\t\timg.src = src\n\t\t\timg.onload = () => {\n\t\t\t\tconnect(img)\n\t\t\t\tconnected = true\n\t\t\t}\n\t\t\treturn () => {\n\t\t\t\tif (connected) {\n\t\t\t\t\tconnect(null)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\treturn null\n\t},\n)\n"]},"metadata":{},"sourceType":"module"}